agents:
  queue: new-central
  slurm_mem: 8G
  modules: climacommon/2024_04_05

env:
  JULIA_LOAD_PATH: "${JULIA_LOAD_PATH}:${BUILDKITE_BUILD_CHECKOUT_PATH}/.buildkite"
  OPENBLAS_NUM_THREADS: 1
  SLURM_KILL_BAD_EXIT: 1
  JULIA_NVTX_CALLBACKS: gc
  JULIA_MAX_NUM_PRECOMPILE_FILES: 100
  JULIA_DEPOT_PATH: "${BUILDKITE_BUILD_PATH}/${BUILDKITE_PIPELINE_SLUG}/depot/default"
  CONFIG_PATH: "config/model_configs"
  GPU_CONFIG_PATH: "config/gpu_configs/"
  PERF_CONFIG_PATH: "config/perf_configs"
  MPI_CONFIG_PATH: "config/mpi_configs"

steps:
  - label: "init :computer:"
    key: "init_cpu_env"
    concurrency: 1
    concurrency_group: 'depot/climaatmos-ci'
    command:
      - "echo $$JULIA_DEPOT_PATH"

      - echo "--- Instantiate project"
      - "julia --project -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project -e 'using Pkg; Pkg.precompile()'"
      - "julia --project -e 'using Pkg; Pkg.status()'"

      - echo "--- Instantiate examples"
      - "julia --project=examples -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=examples -e 'using Pkg; Pkg.precompile()'"
      - "julia --project=examples -e 'using CUDA; CUDA.precompile_runtime()'"
      - "julia --project=examples -e 'using Pkg; Pkg.status()'"

      - echo "--- Instantiate perf"
      - "julia --project=perf -e 'using Pkg; Pkg.instantiate(;verbose=true)'"
      - "julia --project=perf -e 'using Pkg; Pkg.precompile()'"
      - "julia --project=perf -e 'using Pkg; Pkg.status()'"

      - echo "--- Download artifacts"
      - "julia --project=examples artifacts/download_artifacts.jl"

    agents:
      slurm_cpus_per_task: 8
      slurm_gpus: 1
    env:
      JULIA_NUM_PRECOMPILE_TASKS: 8
      JULIA_MAX_NUM_PRECOMPILE_FILES: 50

  - wait

  - group: "Regression tests"
    steps:

      - label: ":computer: Ensure mse tables are reset when necessary"
        command: "julia --color=yes --project=examples regression_tests/test_reset.jl"

  # - group: "Radiation"
  #   steps:

  #     - label: ":computer: single column radiative equilibrium gray"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/single_column_radiative_equilibrium_gray.yml
  #       artifact_paths: "single_column_radiative_equilibrium_gray/output_active/*"

  #     - label: ":computer: single column radiative equilibrium clearsky"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/single_column_radiative_equilibrium_clearsky.yml
  #       artifact_paths: "single_column_radiative_equilibrium_clearsky/output_active/*"

  #     - label: ":computer: single column radiative equilibrium clearsky prognostic surface temperature"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/single_column_radiative_equilibrium_clearsky_prognostic_surface_temp.yml
  #       artifact_paths: "single_column_radiative_equilibrium_clearsky_prognostic_surface_temp/output_active/*"

  #     - label: ":computer: single column radiative equilibrium allsky idealized clouds varying insolation"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/single_column_radiative_equilibrium_allsky_idealized_clouds.yml
  #       artifact_paths: "single_column_radiative_equilibrium_allsky_idealized_clouds/output_active/*"

  # - group: "Precipitation"
  #   steps:
  #     - label: ":umbrella: 1-moment precipitation sanity test single column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/single_column_precipitation_test.yml
  #       artifact_paths: "single_column_precipitation_test/output_active/*"

  # - group: "Gravity wave"
  #   steps:

  #     - label: ":computer: non-orographic gravity wave parameterization unit test 3d"
  #       command: "julia --color=yes --project=examples test/parameterized_tendencies/gravity_wave/non_orographic_gravity_wave/nogw_test_3d.jl"
  #       artifact_paths: "nonorographic_gravity_wave_test_3d/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":computer: non-orographic gravity wave parameterization test with MiMA output"
  #       command: "julia --color=yes --project=examples test/parameterized_tendencies/gravity_wave/non_orographic_gravity_wave/nogw_test_mima.jl"
  #       artifact_paths: "nonorographic_gravity_wave_test_mima/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":computer: non-orographic gravity wave parameterization unit test single column"
  #       command: "julia --color=yes --project=examples test/parameterized_tendencies/gravity_wave/non_orographic_gravity_wave/nogw_test_single_column.jl"
  #       artifact_paths: "nonorographic_gravity_wave_test_single_column/output_active/*"

  #     - label: ":computer: orographic gravity wave parameterization unit test for base flux calculation"
  #       command: "julia --color=yes --project=examples test/parameterized_tendencies/gravity_wave/orographic_gravity_wave/ogwd_baseflux.jl"
  #       artifact_paths: "orographic_gravity_wave_test_baseflux/output_active/*"

  #     - label: ":computer: orographic gravity wave parameterization unit test for 3d calculation"
  #       command: "julia --color=yes --project=examples test/parameterized_tendencies/gravity_wave/orographic_gravity_wave/ogwd_3d.jl"
  #       artifact_paths: "orographic_gravity_wave_test_3d/output_active/*"

  #     - label: ":computer: single column non-orographic gravity wave parameterization"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/single_column_nonorographic_gravity_wave.yml
  #       artifact_paths: "single_column_nonorographic_gravity_wave/output_active/*"

  # - group: "Column Examples"
  #   steps:

  #     - label: ":computer: single column hydrostatic balance float64"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/single_column_hydrostatic_balance_ft64.yml
  #       artifact_paths: "single_column_hydrostatic_balance_ft64/output_active/*"

  # - group: "Box Examples"
  #   steps:

  #     - label: ":computer: Box hydrostatic balance (ρe_tot)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/box_hydrostatic_balance_rhoe.yml
  #       artifact_paths: "box_hydrostatic_balance_rhoe/output_active/*"

  #     - label: ":computer: 3D density current"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/box_density_current_test.yml
  #       artifact_paths: "box_density_current_test/output_active/*"

  # - group: "Plane Examples"
  #   steps:
  #     - label: ":computer: Agnesi linear hydrostatic mountain experiment (uniform)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/plane_agnesi_mountain_test_uniform.yml
  #       artifact_paths: "plane_agnesi_mountain_test_uniform/output_active/*"

  #     - label: ":computer: Agnesi linear hydrostatic mountain experiment (stretched)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/plane_agnesi_mountain_test_stretched.yml
  #       artifact_paths: "plane_agnesi_mountain_test_stretched/output_active/*"

  #     - label: ":computer: Schar mountain experiment (uniform grid)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/plane_schar_mountain_test_uniform.yml
  #       artifact_paths: "plane_schar_mountain_test_uniform/output_active/*"

  #     - label: ":computer: Schar mountain experiment (stretched grid)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/plane_schar_mountain_test_stretched.yml
  #       artifact_paths: "plane_schar_mountain_test_stretched/output_active/*"

  #     - label: ":computer: Density current experiment"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/plane_density_current_test.yml
  #       artifact_paths: "plane_density_current_test/output_active/*"


  - group: "Sphere Examples (Dycore)"
    steps:

      - label: ":computer: hydrostatic balance (ρe) float64"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_hydrostatic_balance_rhoe_ft64.yml
        artifact_paths: "sphere_hydrostatic_balance_rhoe_ft64/output_active/*"
        agents:
          slurm_mem: 20GB

      - label: ":computer: baroclinic wave (ρe)"
        key: sphere_baroclinic_wave_rhoe
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_baroclinic_wave_rhoe.yml
        artifact_paths: "sphere_baroclinic_wave_rhoe/output_active/*"

      - label: ":computer: no lim ARS baroclinic wave (ρe) equilmoist"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_baroclinic_wave_rhoe_equilmoist.yml

          julia --color=yes --project=examples regression_tests/test_mse.jl
          --job_id sphere_baroclinic_wave_rhoe_equilmoist
          --out_dir sphere_baroclinic_wave_rhoe_equilmoist/output_active
        artifact_paths: "sphere_baroclinic_wave_rhoe_equilmoist/output_active/*"
        agents:
          slurm_constraint: icelake|cascadelake|skylake|epyc

      - label: ":computer: no lim ARS baroclinic wave (ρe) equilmoist (deep sphere)"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/deep_sphere_baroclinic_wave_rhoe_equilmoist.yml

          julia --color=yes --project=examples regression_tests/test_mse.jl
          --job_id deep_sphere_baroclinic_wave_rhoe_equilmoist
          --out_dir deep_sphere_baroclinic_wave_rhoe_equilmoist/output_active
        artifact_paths: "deep_sphere_baroclinic_wave_rhoe_equilmoist/output_active/*"
        agents:
          slurm_constraint: icelake|cascadelake|skylake|epyc

      - label: ":computer: no lim ARS baroclinic wave (ρe) equilmoist with cloud diagnostics"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_baroclinic_wave_rhoe_equilmoist_cldiag.yml
        artifact_paths: "sphere_baroclinic_wave_rhoe_equilmoist_cldiag/output_active/*"

      - label: ":computer: no lim ARS baroclinic wave (ρe) equilmoist explicit vertdiff"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_baroclinic_wave_rhoe_equilmoist_expvdiff.yml
        artifact_paths: "sphere_baroclinic_wave_rhoe_equilmoist_expvdiff/output_active/*"

      - label: ":computer: no lim ARS baroclinic wave (ρe) equilmoist implicit vertdiff"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_baroclinic_wave_rhoe_equilmoist_impvdiff.yml
        artifact_paths: "sphere_baroclinic_wave_rhoe_equilmoist_impvdiff/output_active/*"

      # Add this back when we figure out what to do with SSP and zalesak
      # - label: ":computer: SSP zalesak tracer & energy upwind baroclinic wave (ρe_tot) equilmoist"
      #   command: >
      #     julia --color=yes --project=examples examples/hybrid/driver.jl
      #     --config_file $CONFIG_PATH/$$JOB_NAME.yml
      #   artifact_paths: "$$JOB_NAME/output_active/*"
      #   agents:
      #     slurm_mem: 64GB
      #   env:
      #     JOB_NAME: "sphere_zalesak_upwind_tracer_energy_ssp_baroclinic_wave_rhoe_equilmoist"

      - label: ":computer: no lim ARS baroclinic wave (ρe) equilmoist check conservation float64"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl --config_file $CONFIG_PATH/sphere_baroclinic_wave_rhoe_equilmoist_conservation_ft64.yml
        artifact_paths: "sphere_baroclinic_wave_rhoe_equilmoist_conservation_ft64/output_active/*"

      - label: ":computer: held suarez (ρe) hightop"
        key: sphere_held_suarez_rhoe_hightop
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_held_suarez_rhoe_hightop.yml
        artifact_paths: "sphere_held_suarez_rhoe_hightop/output_active/*"

      - label: ":computer: no lim ARS held suarez (ρe) equilmoist hightop sponge"
        command: >
          julia --color=yes --project=examples examples/hybrid/driver.jl
          --config_file $CONFIG_PATH/sphere_held_suarez_rhoe_equilmoist_hightop_sponge.yml

          julia --color=yes --project=examples regression_tests/test_mse.jl
          --job_id sphere_held_suarez_rhoe_equilmoist_hightop_sponge
          --out_dir sphere_held_suarez_rhoe_equilmoist_hightop_sponge/output_active
        artifact_paths: "sphere_held_suarez_rhoe_equilmoist_hightop_sponge/output_active/*"
        agents:
          slurm_constraint: icelake|cascadelake|skylake|epyc

  # - group: "Sphere Examples (Aquaplanet)"
  #   steps:

  #     - label: ":umbrella: aquaplanet (ρe_tot) equilmoist allsky radiation monin_obukhov varying insolation gravity wave (gfdl_restart) high top with 1-moment micro"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_aquaplanet_rhoe_equilmoist_allsky_gw_res.yml
  #       artifact_paths: "sphere_aquaplanet_rhoe_equilmoist_allsky_gw_res/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":computer: aquaplanet (ρe_tot) nonequilmoist allsky radiation monin_obukhov varying insolation gravity wave (gfdl_restart) high top with 1-moment micro"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_aquaplanet_rhoe_nonequilmoist_allsky_gw_res.yml
  #       artifact_paths: "sphere_aquaplanet_rhoe_nonequilmoist_allsky_gw_res/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":computer: aquaplanet (ρe_tot) equilmoist allsky radiation monin_obukhov varying insolation gravity wave (raw_topo) high top zonally asymmetric"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_aquaplanet_rhoe_equilmoist_allsky_gw_raw_zonallyasymmetric.yml

  #         julia --color=yes --project=examples regression_tests/test_mse.jl
  #         --job_id sphere_aquaplanet_rhoe_equilmoist_allsky_gw_raw_zonallyasymmetric
  #         --out_dir sphere_aquaplanet_rhoe_equilmoist_allsky_gw_raw_zonallyasymmetric/output_active
  #       artifact_paths: "sphere_aquaplanet_rhoe_equilmoist_allsky_gw_raw_zonallyasymmetric/output_active/*"
  #       agents:
  #         slurm_mem: 20GB
  #         slurm_constraint: icelake|cascadelake|skylake|epyc

  #     - label: ":computer: aquaplanet (ρe_tot) slabocean equilmoist allsky radiation monin_obukhov varying insolation"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/aquaplanet_rhoe_equil_clearsky_tvinsol_0M_slabocean.yml
  #       artifact_paths: "aquaplanet_rhoe_equil_clearsky_tvinsol_0M_slabocean/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  # - group: "Sphere Examples (Topography)"
  #   steps:

  #     - label: ":computer: baroclinic wave (ρe) topography (dcmip)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_baroclinic_wave_rhoe_topography_dcmip_rs.yml
  #       artifact_paths: "sphere_baroclinic_wave_rhoe_topography_dcmip_rs/output_active/*"

  #     - label: ":computer: held suarez (ρe) topography (dcmip)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_held_suarez_rhoe_topography_dcmip.yml
  #       artifact_paths: "sphere_held_suarez_rhoe_topography_dcmip/output_active/*"

  #     - label: ":computer: held suarez (ρe) equilmoist topography (dcmip)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_held_suarez_rhoe_equilmoist_topography_dcmip.yml
  #       artifact_paths: "sphere_held_suarez_rhoe_equilmoist_topography_dcmip/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":computer: Diagnostic DCMIP200 surface elevation spectra"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_ssp_baroclinic_wave_rhoe_equilmoist_dcmip200.yml
  #       artifact_paths: "sphere_ssp_baroclinic_wave_rhoe_equilmoist_dcmip200/output_active/*"

  #     - label: ":computer: Diagnostic Earth surface elevation spectra"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/sphere_ssp_baroclinic_wave_rhoe_equilmoist_earth.yml
  #       artifact_paths: "sphere_ssp_baroclinic_wave_rhoe_equilmoist_earth/output_active/*"

  # - group: "MPI Examples"
  #   steps:

  #     - label: ":computer: Prep restart for MPI"
  #       key: "mpi_baro_wave_make_restart"
  #       command: >
  #         srun julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $MPI_CONFIG_PATH/mpi_make_restart.yml
  #       artifact_paths: "mpi_make_restart/output_active/*"
  #       env:
  #         CLIMACORE_DISTRIBUTED: "MPI"
  #       agents:
  #         slurm_ntasks: 2
  #         slurm_mem: 16G

  #     - label: ":computer: Test restart for MPI baroclinic wave"
  #       key: "restart_mpi_baro_wave"
  #       depends_on: "mpi_baro_wave_make_restart"
  #       command: >
  #         tar xvf mpi_make_restart/output_active/hdf5_files.tar -C mpi_make_restart/output_active

  #         srun julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $MPI_CONFIG_PATH/restart_mpi_baroclinic_wave_rhoe.yml
  #       artifact_paths: "restart_mpi_baroclinic_wave_rhoe/output_active/*"
  #       env:
  #         CLIMACORE_DISTRIBUTED: "MPI"
  #       agents:
  #         slurm_ntasks: 2
  #         slurm_mem: 16G
  #       timeout_in_minutes: 20
  #       soft_fail: true
  #       #retry:
  #       #  automatic: true

  #     - label: ":computer: MPI no lim ARS aquaplanet (ρe) equilmoist clearsky radiation"
  #       command: >
  #         srun julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $MPI_CONFIG_PATH/mpi_sphere_aquaplanet_rhoe_equilmoist_clearsky.yml
  #       artifact_paths: "mpi_sphere_aquaplanet_rhoe_equilmoist_clearsky/output_active/*"
  #       env:
  #         CLIMACORE_DISTRIBUTED: "MPI"
  #       agents:
  #         slurm_ntasks: 2
  #         slurm_mem: 16GB

  #     - label: ":computer: Prep for calling remap pipeline"
  #       key: "prep_remap"
  #       command: >
  #         srun julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $MPI_CONFIG_PATH/prep_remap.yml
  #       artifact_paths: "prep_remap/output_active/*"
  #       env:
  #         CLIMACORE_DISTRIBUTED: "MPI"
  #       agents:
  #         slurm_ntasks: 2
  #         slurm_mem: 16G

  #     - label: ":computer: Exercise remap pipeline"
  #       key: "remap_pipeline"
  #       depends_on: "prep_remap"
  #       command: >
  #         tar xvf prep_remap/output_active/hdf5_files.tar -C prep_remap/output_active

  #         julia --color=yes --project=examples post_processing/remap/remap_pipeline.jl
  #         --data_dir prep_remap/output_active --out_dir remap_pipeline_output
  #       artifact_paths: "remap_pipeline_output/*"

  # - group: "Configs"
  #   steps:

  #     - label: ":computer: Test IO"
  #       command: >
  #         julia --color=yes --project=examples --threads=8 examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/test_io.yml
  #       artifact_paths: "test_io/output_active/*"
  #       agents:
  #         slurm_cpus_per_task: 8

  #     - label: ":computer: MPI io test"
  #       command: >
  #         srun julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/test_mpi_io.yml
  #       artifact_paths: "test_mpi_io/output_active/*"
  #       env:
  #         CLIMACORE_DISTRIBUTED: "MPI"
  #       agents:
  #         slurm_ntasks: 2
  #         slurm_mem: 16G

  #     # TODO: we should somehow decouple this unit test from the perf env / scripts
  #     - label: ":computer: checkbounds"
  #       command: >
  #         julia --color=yes --check-bounds=yes --project=perf perf/benchmark.jl
  #         $PERF_CONFIG_PATH/checkbounds.yml
  #       artifact_paths: "checkbounds/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  # - group: "Diagnostic EDMFX"
  #   steps:

  #     - label: ":genie: Diagnostic EDMFX test in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_test_box.yml
  #       artifact_paths: "diagnostic_edmfx_test_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX GABLS in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_gabls_box.yml
  #       artifact_paths: "diagnostic_edmfx_gabls_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX Bomex in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_bomex_box.yml
  #       artifact_paths: "diagnostic_edmfx_bomex_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX Bomex stretched grid in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_bomex_stretched_box.yml
  #       artifact_paths: "diagnostic_edmfx_bomex_stretched_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX DYCOMS_RF01 in a box (explicit)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_dycoms_rf01_explicit_box.yml
  #       artifact_paths: "diagnostic_edmfx_dycoms_rf01_explicit_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX DYCOMS_RF01 in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_dycoms_rf01_box.yml
  #       artifact_paths: "diagnostic_edmfx_dycoms_rf01_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX Rico in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_rico_box.yml
  #       artifact_paths: "diagnostic_edmfx_rico_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX TRMM in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_trmm_box.yml
  #       artifact_paths: "diagnostic_edmfx_trmm_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX TRMM stretched grid in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_trmm_stretched_box.yml
  #       artifact_paths: "diagnostic_edmfx_trmm_stretched_box/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Diagnostic EDMFX aquaplanet with TKE"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/diagnostic_edmfx_aquaplanet.yml

  #         julia --color=yes --project=examples regression_tests/test_mse.jl
  #         --job_id diagnostic_edmfx_aquaplanet
  #         --out_dir diagnostic_edmfx_aquaplanet/output_active
  #       artifact_paths: "diagnostic_edmfx_aquaplanet/output_active/*"
  #       agents:
  #         slurm_mem: 20GB
  #         slurm_constraint: icelake|cascadelake|skylake|epyc

  # - group: "Prognostic EDMFX"
  #   steps:

  #     - label: ":genie: Prognostic EDMFX advection test in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_adv_test_column.yml
  #       artifact_paths: "prognostic_edmfx_adv_test_column/output_active/*"

  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX simple plume test in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_simpleplume_column.yml
  #       artifact_paths: "prognostic_edmfx_simpleplume_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX GABLS in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_gabls_column.yml
  #       artifact_paths: "prognostic_edmfx_gabls_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX Bomex in a column (explicit)"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_bomex_explicit_column.yml
  #       artifact_paths: "prognostic_edmfx_bomex_explicit_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX Bomex with precribed TKE in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_bomex_fixtke_column.yml
  #       artifact_paths: "prognostic_edmfx_bomex_fixtke_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX Bomex stretched grid in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_bomex_stretched_column.yml
  #       artifact_paths: "prognostic_edmfx_bomex_stretched_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX Bomex in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_bomex_column.yml
  #       artifact_paths: "prognostic_edmfx_bomex_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX Dycoms RF01 in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_dycoms_rf01_column.yml
  #       artifact_paths: "prognostic_edmfx_dycoms_rf01_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":umbrella: Prognostic EDMFX Rico in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_rico_column.yml
  #       artifact_paths: "prognostic_edmfx_rico_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":umbrella: Prognostic EDMFX TRMM in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_trmm_column.yml
  #       artifact_paths: "prognostic_edmfx_trmm_column/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX TRMM in a column"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_trmm_column_0M.yml
  #       artifact_paths: "prognostic_edmfx_trmm_column_0M/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX Bomex in a box"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_bomex_box.yml
  #       artifact_paths: "prognostic_edmfx_bomex_box/*"
  #       agents:
  #         slurm_mem: 20GB

  #     - label: ":genie: Prognostic EDMFX aquaplanet"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $CONFIG_PATH/prognostic_edmfx_aquaplanet.yml
  #       artifact_paths: "prognostic_edmfx_aquaplanet/output_active/*"
  #       agents:
  #         slurm_mem: 20GB

  # - group: "GPU"
  #   steps:

  #     - label: "GPU: baroclinic wave"
  #       key: "gpu_baroclinic_wave_rhoe"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $PERF_CONFIG_PATH/gpu_baroclinic_wave_rhoe.yml
  #       artifact_paths: "gpu_implicit_barowave_ref/output_active/*"
  #       agents:
  #         slurm_mem: 16G
  #         slurm_gpus: 1

  #     - label: "GPU: compare BW with CPU"
  #       command: >
  #         tar xvf sphere_baroclinic_wave_rhoe/output_active/hdf5_files.tar -C sphere_baroclinic_wave_rhoe

  #         tar xvf gpu_baroclinic_wave_rhoe//output_active/hdf5_files.tar -C gpu_baroclinic_wave_rhoe

  #         julia --color=yes --project=examples post_processing/compare_outputs.jl
  #         --output_folder_1 sphere_baroclinic_wave_rhoe
  #         --output_folder_2 gpu_baroclinic_wave_rhoe --t_end 10days
  #         --compare_state false
  #       depends_on:
  #         - "sphere_baroclinic_wave_rhoe"
  #         - "gpu_baroclinic_wave_rhoe"

  #     - label: "GPU: GPU dry baroclinic wave"
  #       key: "target_gpu_implicit_baroclinic_wave"
  #       command:
  #         - mkdir -p target_gpu_implicit_baroclinic_wave
  #         - >
  #           nsys profile --trace=nvtx,cuda --output=target_gpu_implicit_baroclinic_wave/output_active/report
  #           julia --color=yes --project=examples examples/hybrid/driver.jl
  #           --config_file ${GPU_CONFIG_PATH}target_gpu_implicit_baroclinic_wave.yml
  #       artifact_paths: "target_gpu_implicit_baroclinic_wave/output_active/*"
  #       agents:
  #         slurm_gpus: 1
  #         slurm_mem: 32G

  #     - label: "GPU: GPU dry baroclinic wave - 4 gpus"
  #       key: "target_gpu_implicit_baroclinic_wave_4process"
  #       command:
  #           # nsys profile --trace=nvtx,cuda,mpi --output=target_gpu_implicit_baroclinic_wave_4process/output_active/report-%q{PMI_RANK}
  #         - mkdir -p target_gpu_implicit_baroclinic_wave_4process
  #         - >
  #           srun --cpu-bind=threads --cpus-per-task=4
  #           julia --threads=3 --color=yes --project=examples examples/hybrid/driver.jl
  #           --config_file ${GPU_CONFIG_PATH}target_gpu_implicit_baroclinic_wave_4process.yml
  #       artifact_paths: "target_gpu_implicit_baroclinic_wave_4process/output_active/*"
  #       env:
  #         CLIMACORE_DISTRIBUTED: "MPI"
  #       agents:
  #         slurm_gpus_per_task: 1
  #         slurm_cpus_per_task: 4
  #         slurm_ntasks: 4
  #         slurm_mem: 32G

  #     - label: "GPU: GPU moist Held-Suarez"
  #       command:
  #         - >
  #           julia --color=yes --project=examples examples/hybrid/driver.jl
  #           --config_file $GPU_CONFIG_PATH/central_gpu_hs_rhoe_equil_55km_nz63_0M.yml
  #       artifact_paths: "central_gpu_hs_rhoe_equil_55km_nz63_0M/output_active/*"
  #       agents:
  #         slurm_gpus: 1
  #         slurm_mem: 16G

  #     - label: "GPU: GPU moist Held-Suarez cloud diagnostics per stage"
  #       command:
  #         - >
  #           julia --color=yes --project=examples examples/hybrid/driver.jl
  #           --config_file $GPU_CONFIG_PATH/central_cloud_diag_gpu_hs_rhoe_equil_55km_nz63_0M.yml
  #       artifact_paths: "central_cloud_diag_gpu_hs_rhoe_equil_55km_nz63_0M/output_active/*"
  #       agents:
  #         slurm_gpus: 1
  #         slurm_mem: 16G

  #     - label: ":umbrella: GPU: gpu_aquaplanet_dyamond"
  #       command:
  #         - mkdir -p gpu_aquaplanet_dyamond
  #         - >
  #           julia --color=yes --project=examples examples/hybrid/driver.jl
  #           --config_file ${GPU_CONFIG_PATH}gpu_aquaplanet_dyamond.yml
  #       artifact_paths: "gpu_aquaplanet_dyamond/output_active/*"
  #       agents:
  #         slurm_gpus: 1

  #     - label: "GPU: Diagnostic EDMFX aquaplanet"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $GPU_CONFIG_PATH/gpu_diagnostic_edmfx_aquaplanet.yml
  #       artifact_paths: "gpu_diagnostic_edmfx_aquaplanet/output_active/*"
  #       agents:
  #         slurm_gpus: 1
  #         slurm_mem: 20G

  #     - label: "GPU: Prognostic EDMFX aquaplanet"
  #       command: >
  #         julia --color=yes --project=examples examples/hybrid/driver.jl
  #         --config_file $GPU_CONFIG_PATH/gpu_prognostic_edmfx_aquaplanet.yml
  #       artifact_paths: "gpu_prognostic_edmfx_aquaplanet/output_active/*"
  #       agents:
  #         slurm_gpus: 1
  #         slurm_mem: 20G
  #       soft_fail: true

  # - group: "GPU Performance"
  #   steps:

  #     - label: "Perf: GPU implicit baro wave wrt h_elem"
  #       key: "gpu_implicit_barowave_wrt_h_elem"
  #       command: >

  #         julia --color=yes --project=examples perf/benchmark_dump.jl
  #         --config_file $PERF_CONFIG_PATH/gpu_implicit_barowave_wrt_h_elem.yml
  #       artifact_paths: "gpu_implicit_barowave_wrt_h_elem/output_active/*"
  #       agents:
  #         slurm_gpus: 1

  #     - label: "Perf: GPU implicit baro wave"
  #       command: >

  #         julia --color=yes --project=examples perf/benchmark_step.jl
  #         --config_file $PERF_CONFIG_PATH/gpu_implicit_barowave.yml
  #       artifact_paths: "gpu_implicit_barowave/output_active/*"
  #       agents:
  #         slurm_gpus: 1

  #     - label: "Perf: GPU implicit baro wave moist"
  #       command: >

  #         julia --color=yes --project=examples perf/benchmark_step.jl
  #         --config_file $PERF_CONFIG_PATH/gpu_implicit_barowave_moist.yml
  #       artifact_paths: "gpu_implicit_barowave_moist/output_active/*"
  #       agents:
  #         slurm_mem: 16G
  #         slurm_gpus: 1

  #     - label: "Perf: CPU implicit baro wave"
  #       command: >
  #         julia --color=yes --project=examples perf/benchmark_step.jl
  #         --config_file $PERF_CONFIG_PATH/cpu_implicit_barowave.yml
  #       artifact_paths: "cpu_implicit_barowave/output_active/*"

  # - group: "Performance"
  #   steps:

  #     # Benchmarks
  #     - label: ":computer: Benchmark: perf target (default)"
  #       command: >
  #         julia --color=yes --project=perf perf/benchmark.jl
  #         $PERF_CONFIG_PATH/bm_perf_target.yml
  #       agents:
  #         slurm_mem: 24GB

  #     - label: ":computer: Benchmark: perf target (Threaded)"
  #       command: >
  #         julia --color=yes --threads 8 --project=perf perf/benchmark.jl
  #         $PERF_CONFIG_PATH/bm_perf_target_threaded.yml
  #       agents:
  #         slurm_mem: 24GB
  #         slurm_cpus_per_task: 8

  #     # Flame graphs
  #     - label: ":fire: Flame graph: perf target (IO)"
  #       command: >
  #         julia --color=yes --project=perf perf/benchmark_netcdf_io.jl
  #       artifact_paths: "flame_perf_io/*.html"
  #       agents:
  #         slurm_gpus: 1

  #     - label: ":fire: Flame graph: perf target (default)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_target.yml
  #       artifact_paths: "flame_perf_target/*"
  #       agents:
  #         slurm_mem: 24GB

  #     - label: ":fire: Flame graph: perf target (with tracers)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_target_tracers.yml
  #       artifact_paths: "flame_perf_target_tracers/*"
  #       agents:
  #         slurm_mem: 24GB

  #     - label: ":fire: Flame graph: perf target (diagnostic edmfx)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_target_diagnostic_edmfx.yml
  #       artifact_paths: "flame_perf_target_diagnostic_edmfx/*"
  #       agents:
  #         slurm_mem: 24GB

  #     - label: ":fire: Flame graph: perf target (prognostic edmfx aquaplanet)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_target_prognostic_edmfx_aquaplanet.yml
  #       artifact_paths: "flame_perf_target_prognostic_edmfx_aquaplanet/*"
  #       agents:
  #         slurm_mem: 48GB

  #     - label: ":fire: Flame graph: perf target (barowave jfnk)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_sphere_baroclinic_wave_rhoe_equilmoist_expvdiff.yml
  #       artifact_paths: "flame_sphere_baroclinic_wave_rhoe_equilmoist_expvdiff/*"
  #       agents:
  #         slurm_mem: 40GB

  #     - label: ":fire: Flame graph: perf target (frierson diffusion)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_target_frierson.yml
  #       artifact_paths: "flame_perf_target_frierson/*"
  #       agents:
  #         slurm_mem: 48GB

  #     - label: ":fire: Flame graph: perf target (Threaded)"
  #       command: >
  #         julia --threads 8 --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_target_threaded.yml
  #       artifact_paths: "flame_perf_target_threaded/*"
  #       agents:
  #         slurm_cpus_per_task: 8
  #         slurm_mem: 24GB

  #     - label: ":fire: Flame graph: perf target (Callbacks)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_target_callbacks.yml
  #       artifact_paths: "flame_perf_target_callbacks/*"
  #       agents:
  #         slurm_mem: 24GB

  #     - label: ":fire: Flame graph: gravity wave"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_gw.yml
  #       artifact_paths: "flame_perf_gw/*"
  #       agents:
  #         slurm_mem: 24GB

  #     - label: ":fire: Flame graph: perf target (diagnostics)"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_perf_diagnostics.yml
  #       artifact_paths: "flame_perf_diagnostics/*"
  #       agents:
  #         slurm_mem: 24GB

  #     - label: ":fire: Flame graph: gpu job"
  #       command: >
  #         julia --color=yes --project=perf perf/flame.jl
  #         $PERF_CONFIG_PATH/flame_gpu_implicit_barowave_moist.yml
  #       artifact_paths: "flame_gpu_implicit_barowave_moist/*"
  #       agents:
  #         slurm_mem: 48GB
  #         slurm_gpus: 1
  #         gres: "gpu:p100:1"

  #     # Inference
  #     - label: ":rocket: JET n-failures (inference)"
  #       command: >
  #         julia --color=yes --project=perf perf/jet_test_nfailures.jl
  #         $PERF_CONFIG_PATH/jet_n_failures.yml
  #       agents:
  #         slurm_mem: 24GB

  #     # Latency
  #     - label: ":mag::rocket: Invalidations"
  #       command: >
  #         julia --color=yes --project=perf perf/invalidations.jl
  #       artifact_paths: "invalidations/*"
  #       agents:
  #         slurm_mem: 24GB

  - wait: ~
    continue_on_failure: true

  - label: ":robot_face: Print new mse tables"
    command: "julia --color=yes --project=examples regression_tests/print_new_mse.jl"

  - label: ":robot_face: Print new reference counter"
    command: "julia --color=yes --project=examples regression_tests/print_new_ref_counter.jl"

  - label: ":bar_chart: Tabulate performance summary"
    command: "julia --color=yes --project=perf perf/tabulate_perf_summary.jl"

  - label: ":chart_with_downwards_trend: build history"
    command:
      - build_history main
    artifact_paths:
      - "build_history.html"

  - wait

  - label: ":robot_face: Move main results"
    command: "julia --color=yes --project=examples regression_tests/move_output.jl"
